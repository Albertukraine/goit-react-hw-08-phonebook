{"version":3,"file":"static/js/214.4d3f3a7d.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/NameList/NameList.module.css?8a02","components/NameList/NameList.jsx","pages/Phonebook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"input\":\"Form_input__FTtTw\",\"button\":\"Form_button__8NOIT\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import style from './Form.module.css';\nimport React from 'react';\nimport { useState } from 'react';\n// import { setContact } from 'redux/contactsSlice';\nimport { setContact } from 'redux/operations';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const dispatch = useDispatch();\n\n  const handleInputChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const contacts = useSelector(state => state.numberValue);\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    // console.log('submit contacts value',contacts.value);\n    // console.log(name);\n\n    if (contacts.value.map(item => item.name).includes(name))\n      return alert(`${name} is already in contacts`);\n    dispatch(setContact({ id: nanoid(), number: number, name: name }));\n    reset();\n  };\n  return (\n    <form onSubmit={handleSubmit} className={style.form}>\n      <label> Name{}</label>\n      <input\n        className={style.input}\n        onChange={handleInputChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Boris Johnsoniuk\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label> Number{}</label>\n      <input\n        className={style.input}\n        onChange={handleInputChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"+123456789\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\">Add Contact</button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\",\"filterWrapper\":\"Filter_filterWrapper__ohvAm\"};","import style from './Filter.module.css';\nimport { setFilterValue } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilterValue);\n\n  const handleInput = evt => {\n    const input = evt.target;\n    dispatch(setFilterValue(input.value));\n  };\n\n  return (\n    <div className={style.filterWrapper}>\n      <label>Find contacts by name</label>\n      <input\n        className={style.input}\n        onInput={handleInput}\n        value={value}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Type name to find\"\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"NameList_list__sh2M1\",\"contactWrapper\":\"NameList_contactWrapper__V+P+H\"};","import style from './NameList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { getContacts, getFilterValue } from 'redux/selectors';\n\nexport const NameList = () => {\n  const dispatch = useDispatch();\n\n  const filterValueFromStore = useSelector(getFilterValue);\n  const contactsFromStore = useSelector(getContacts);\n\n  const normalizedFilter = filterValueFromStore.toLowerCase();\n  const contacts = contactsFromStore.value.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <ul className={style.list}>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          <p className={style.contactWrapper}>\n            <span className={style.nameText}>{contact.name}</span>\n            <span className={style.numberValue}>{contact.number}</span>\n          </p>\n          <button\n            name={contact.id}\n            className={style.deleteBtn}\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { Form } from 'components/Form/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { NameList } from 'components/NameList/NameList';\nimport { fetchContacts } from 'redux/operations';\n\n// import { Loader } from 'components/Loader/Loader';\n\n\nexport default function PhoneBook() {\n  const dispatch = useDispatch();\n \n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <Form />\n      <Filter />\n      <Loader />\n      <NameList />\n     \n      \n      \n    </>\n  );\n}"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","useState","name","setName","number","setNumber","dispatch","useDispatch","handleInputChange","evt","currentTarget","value","contacts","useSelector","state","numberValue","onSubmit","preventDefault","map","item","includes","alert","setContact","className","style","onChange","type","placeholder","pattern","title","required","Filter","getFilterValue","onInput","input","target","setFilterValue","NameList","filterValueFromStore","contactsFromStore","getContacts","normalizedFilter","toLowerCase","filter","contact","onClick","deleteContact","PhoneBook","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}